repositories {
    mavenCentral()
}

allprojects {
    apply plugin: 'java'
}

subprojects {
    task jarSources(type: Jar){
        from sourceSets.main.allSource
        classifier = 'source'
    }

    artifacts {
        archives jarSources
    }
}


task wrapper(type: Wrapper) { gradleVersion = '3.1' }


task testTask << {
    configurations.compile.incoming.resolutionResult.allDependencies.each { println it }
    def componentIds = configurations.compile.incoming.resolutionResult.allDependencies.collect { it.selected.id }
    def result = dependencies.createArtifactResolutionQuery()
            .forComponents(componentIds)
            .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
            .execute()

    result.components.each {ComponentResult component ->
        println "Compo: " + component.id
    }
    result.resolvedComponents.each {ComponentArtifactsResult component ->
        println "Resolved Compo: " + component.id
        component.getArtifacts(SourcesArtifact).each {ArtifactResult artifactResult ->
            println "Sources for ${component.id}: ${artifactResult.file}"
        }

    }

}

dependencies {
    compile 'io.aeron:aeron-client:1.0.1'
    compile 'org.nanohttpd:nanohttpd:2.3.1'
//    compile project('submod')
    compile project(':toplevelmodule')
}
