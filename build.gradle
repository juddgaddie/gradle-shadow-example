repositories {
    mavenCentral()
}

allprojects {
    apply plugin: 'java'
}

defaultTasks 'jarSources','testTask'


subprojects {
    task jarSources(type: Jar){
        from sourceSets.main.allSource
        classifier = 'source'
    }

    artifacts {
        archives jarSources
    }
}


task wrapper(type: Wrapper) { gradleVersion = '3.1' }


task testTask << {
    configurations.compile.incoming.resolutionResult.allDependencies.each { println it }
    def componentIds = configurations.compile.incoming.resolutionResult.allDependencies.collect { it.selected.id }
    def result = dependencies.createArtifactResolutionQuery()
            .forComponents(componentIds)
            .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
            .execute()

    result.components.each {ComponentResult component ->
        println "Components in compile configuration: " + component.id
    }

    boolean foundTopLevelModule = false
    result.resolvedComponents.each {ComponentArtifactsResult component ->
        println "Resolved Components: " + component.id
        component.getArtifacts(SourcesArtifact).each {ArtifactResult artifactResult ->
            println "Sources for ${component.id}: ${artifactResult.file}"
            if (component.id.toString().contains("project :toplevelmodule")){
               foundTopLevelModule = true
            }
        }

    }
    if (foundTopLevelModule) {
        println "Found Top Level Module"
    } else {
        println "Top level Module not found in resolved artifacts"
    }

}

dependencies {
    compile 'org.nanohttpd:nanohttpd:2.3.1'
    compile project(':toplevelmodule')
}
